# This is a configuration file for RT32netlog package.
# Each section describes how UDP datagrams will be captured
# and processed.
# Sections can be named arbitrarily, with few exceptions.
#
# Reserved section names are:
# [GENERAL], [REDIS] and [DB]
#
# The services using these blocks can be invoked using the following
# syntax:
#
# python python/services/save-UDPdata-generic-module.py -m SECTION_NAME
# 
#
# This file is typically placed at $HOME and renamed to
# .RT32netlog.ini

##############################################################
##############################################################
##############################################################
# Datagram forward example
[TEST_FWD]

# listen on port
udp_port = 3493
# and interface
udp_ip = 192.168.1.255

# Suppose the incoming datagrams have format:
#
# 2021 9 28 10 31 41 888523 2000.000 2459485.938679 271 44139.483510 -24.9975 0.0007 183.9150 53.0948 0 1 -0.0100 0.0100 0.0000 0.0000 -0 -0 -0 0 70 0 0 0 0 0 0 -25.0000 0.0000 344.2920 62.1476 13415
#
# and arrive several times per second,
# and we wish to extract julian day (the 9'th word) ammed it with
# apropriate key - "JD" and average in timescales of 2 seconds.
#
# First let's pre-process the input datagram using regular expressions.
# We use input_resub option which should specify a list of lists of length
# two. The first element should specify regular expression for 
# the pattern to be sought in the input datagram string and 
# the second element should specify regex for its replacement.
# Escape characters '\' should be used for back-references e.g. \1
input_resub=[ ["^(?:\\S+ ){8}(\\S+).*", "JD=\\1"] ]

# search for the required keys in the incoming UDP datagram
required_keys = ["JD"]

# If output to redis database is also requested then
saveToRedis = False

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["JD"]

# The redis key names can be prefixed using namespace prefix
# redisNamespace = rt4_control

# Finally, perform 2-s averaging of the preprocessed input and 
# resubmit the input to a different host and port
averaging_interval=2
resend_output_to_host=127.0.0.1
resend_output_to_port=10000

# The output datagram sent to port 10000 will look something 
# like this:
#
# JD=2459485.962054424,dt=2021-09-28 11:05:21.717967,
# 
# and will be emitted roughly every two seconds as requested.
# Each datagram of the package is ammended with additional
# dt key that contains UTC date and time of the UDP datagram
# arrival (or as in this case the mean date and time calculated
# over dates and times of all datagrams that came within the 
# averaging time scale (here 2 seconds).
##############################################################
##############################################################
##############################################################
# regular expressions example 2
[TEST_RTAZ]

# listen on port
udp_port = 3493
# and interface
udp_ip = 192.168.1.255

# We assume the same input datagrams format as in [TEST_FWD] section.
# See that section for details.
# This time we are interested in two values in the datagrams:
# the one on position 11 and 12 counting from 0.
#
# We pre-process the input datagram using the below list of regex
# and name the selected columns with keys "AZtrue" and "ZDtrue":
input_resub=[ ["^(?:\\S+ ){11}(\\S+) (\\S+).*", "AZtrue=\\1,ZDtrue=\\2"] ]

# search for the required keys in the incoming UDP datagram
required_keys = ["AZtrue","ZDtrue"]

# If output to redis database is also requested then
saveToRedis = False

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["AZtrue","ZDtrue"]

# The key names can be prefixed using namespace 
# redisNamespace = rt4_control


# averaging interval in seconds
# If this is not given then resend_output* options can still be used
# and in this case the non-averaged version of the output datagram
# is sent. Note that saveToRedis and saveToDB options store
# the output version of the data (here, pre-processed and averaged).
averaging_interval=1
resend_output_to_host=127.0.0.1
resend_output_to_port=10000

#alarm_on = [ ["ZDtrue", ">", "40" ], ["ZDtrue", "<", "50" ] ]

##############################################################
##############################################################
##############################################################
[TEST_SIMPLE]
# Suppose the incoming datagrams have format:
#
# T_electric=17.2,H_electric=48.8,P_electric=1014
#
# We listen on port
udp_port = 33051
# on all interfaces
udp_ip = 0.0.0.0

# search for the required keys in the incoming UDP datagram
required_keys = ["T_electric", "H_electric", "P_electric"]

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["T","RH", "P"]
# If these data should be saved to mySQL table uncomment this
#saveToDB = True

# If we wish to raise sendmail alarm when the temperature
# raises above 30 or is below 15 uncomment line below.
# Note that alarm_on feature is still experimentall 
# and development feature
# and it will send email on every UDP datagram 
# that matches this criterion. Refer to section "[GENERAL]"
# to define email addresses the alarm message should be sent to.
# The list of recipients can also be specified in this section
# using alarm_email= ["xxx@yyy.zzz"] option
#
# alarm_on = [ ["T", ">", "30" ], ["T", "<", "15" ] ]

# If output to redis database is also requested then
saveToRedis = True

# The key names can be prefixed using namespace 
redisNamespace = electric_cabin

##############################################################
##############################################################
##############################################################
[CLIENT_ASCII]
# store full datagram strings to redis under key "raw"

# listen on port
udp_port = 3493
# and interface
udp_ip = 192.168.1.255

# pre-process the input datagram to convert it to key=value
# format
input_resub=[ ["(.*)", "raw=\\1"] ]

# search for the required keys in the incoming UDP datagram
# In this case the name of the key will be 'raw'.
# If outout to database is requested the mapping can still be applied
required_keys = ["raw"]

# If output to redis database is requested then
saveToRedis = True

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["client_ascii"]

# The key names can be prefixed using namespace 
redisNamespace = rt4_control


##############################################################
##############################################################
##############################################################
[TEST_ALARM]

# listen on port
udp_port = 10000
# and interface
udp_ip = 127.0.0.1

# search for the required keys in the incoming UDP datagram
required_keys = ["T"]

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["T"]

alarm_on = [ ["T", ">", "30" ], ["T", "<", "15" ] ]
alarm_email= ["xxx@yyy.zzz"]

# If output to redis database is also requested then
saveToRedis = False

# The key names can be prefixed using namespace 
#redisNamespace = electric_cabin




##############################################################
##############################################################
##############################################################
#
# COMMON BLOCKS
#
#
# The names of these blocks are reserved so individual module 
# blocks should not be named after COMMON BLOCKS 
#
##############################################################
##############################################################
##############################################################

# mysql database block
[DB]
host = 127.0.0.1
port = 3306
user = kra
passwd = xxxxxxxxx
db = kra

##############################################################
##############################################################
##############################################################
# redis database block
[REDIS]
host = 127.0.0.1
port = 6379
db = 0
#namespace = 'rt32meteo'

# list_max_elem option defines the maximal number of entries
# in the redis queue. Subsequent UDP datagrams will push the 
# queue in FIFO manner.
list_max_elem = 10000

##############################################################
##############################################################
##############################################################
[GENERAL]
alarm_email= ["xxx@yyy.zzz"]
# Or specify list of alarm recipients. This option is
# replaced by option in individual sections if present.
#alarm_email= ["xxx1@yyy1.zzz1", "xxx2@yyy2.zzz2"]
