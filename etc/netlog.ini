# this file should be placed at $HOME and renamed to
# .RT32netlog.ini

##############################################################
##############################################################
##############################################################
[CLIENT_ASCII]

# listen on port
udp_port = 3493
# and interface
udp_ip = 192.168.1.255

# pre-process the input datagram using the below list of regex
# input_resub option should specify a list of lists of length
# two. The first element should specify regular expression for 
# the pattern to be sought in the input datagram string and 
# the second element should specify regex for its replacement.
# escape characters '\' should be used for back-references e.g. \1
input_resub=[ ["(.*)", "raw=\\1"] ]
#input_resub=['(.*)', 'raw=\1']

# search for the required keys in the incoming UDP datagram
# If 'raw', then the whole datagram is taken as one string value.
# In this case the name of the key will be created as 'raw'.
# If outout to database is requested the mapping can still be applied
required_keys = ["raw"]

# If output to redis database is also requested then
saveToRedis = True

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["client_ascii"]

# The key names can be prefixed using namespace 
redisNamespace = rt4_control

##############################################################
##############################################################
##############################################################
[TEST_FWD]

# listen on port
udp_port = 3493
# and interface
udp_ip = 192.168.1.255

# pre-process the input datagram using the below list of regex
# input_resub option should specify a list of lists of length
# two. The first element should specify regular expression for 
# the pattern to be sought in the input datagram string and 
# the second element should specify regex for its replacement.
# escape characters '\' should be used for back-references e.g. \1
input_resub=[ ["^(?:\\S+ ){6}(\\S+).*", "JD=\\1"] ]

# search for the required keys in the incoming UDP datagram
required_keys = ["JD"]

# If output to redis database is also requested then
saveToRedis = False

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["JD"]

# The key names can be prefixed using namespace 
# redisNamespace = rt4_control

averaging_interval=10
resend_output_to_host=127.0.0.1
resend_output_to_port=10000

##############################################################
##############################################################
##############################################################
[TEST_RTAZ]

# listen on port
udp_port = 3493
# and interface
udp_ip = 192.168.1.255

# pre-process the input datagram using the below list of regex
# input_resub option should specify a list of lists of length
# two. The first element should specify regular expression for 
# the pattern to be sought in the input datagram string and 
# the second element should specify regex for its replacement.
# escape characters '\' should be used for back-references e.g. \1
input_resub=[ ["^(?:\\S+ ){10}(\\S+)(\\S+).*", "AZtrue=\\1,ZDtrue=\\2"] ]

# search for the required keys in the incoming UDP datagram
required_keys = ["AZtrue","ZDtrue"]

# If output to redis database is also requested then
saveToRedis = False

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["AZtrue","ZDtrue"]

# The key names can be prefixed using namespace 
# redisNamespace = rt4_control

# averaging interval in seconds
# If this is not given then resend_output* options can still be used
# and in this case the non-averaged version of the output datagram
# is sent.
averaging_interval=1
resend_output_to_host=127.0.0.1
resend_output_to_port=10000

##############################################################
##############################################################
##############################################################
[TEST_SIMPLE]

# listen on port
udp_port = 33051
# and interface
udp_ip = 0.0.0.0

# search for the required keys in the incoming UDP datagram
required_keys = ["T_electric", "H_electric", "P_electric"]

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["T","RH", "P"]

alarm_on = [ ["T", ">", "30" ], ["T", "<", "15" ] ]

# If output to redis database is also requested then
saveToRedis = True

# The key names can be prefixed using namespace 
redisNamespace = electric_cabin

##############################################################
##############################################################
##############################################################
[TEST_ALARM]

# listen on port
udp_port = 10000
# and interface
udp_ip = 127.0.0.1

# search for the required keys in the incoming UDP datagram
required_keys = ["T"]

# The datagram keys are mapped to mysql table column names as
# (these names are also used for redis)
db_keys = ["T"]

alarm_on = [ ["T", ">", "30" ], ["T", "<", "15" ] ]
alarm_email= ["blew@astro.umk.pl"]

# If output to redis database is also requested then
saveToRedis = False

# The key names can be prefixed using namespace 
#redisNamespace = electric_cabin


##############################################################
##############################################################
##############################################################
#
# COMMON BLOCKS
#
#
# The names of these blocks are reserved so individual module blocks should
# not be named after COMMON BLOCKS 
#
##############################################################
##############################################################
##############################################################

# mysql database block
[DB]
host = 127.0.0.1
port = 3306
user = kra
passwd = xxxxxxxxx
db = kra

##############################################################
##############################################################
##############################################################
# redis database block
[REDIS]
host = 127.0.0.1
port = 6379
db = 0
#namespace = 'rt32meteo'
list_max_elem = 10000

##############################################################
##############################################################
##############################################################
[GENERAL]
#alarm_email= ["tech@astro.umk.pl", "blew@astro.umk.pl"]
alarm_email= ["blew@astro.umk.pl"]
